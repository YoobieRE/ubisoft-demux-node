syntax = "proto2";

package mg.protocol.overlay;

message GetConfigurationReq {
    
}

message GetConfigurationRsp {
    required string library_path = 1;
}

message StartReq {
    required uint32 width = 1;
    required uint32 height = 2;
    required uint32 pid = 3;
}

message StartSuccessRsp {
    required string shared_memory_name = 1;
    required string shared_memory_mutex_name = 2;
    required uint32 product_id = 3;
    optional string ubiservices_application_id = 4;
    optional string ubiservices_space_id = 5;
    optional bool virtual_controls_enabled = 6;
}

message StartFailureRsp {
    
}

message StartRsp {
    optional StartSuccessRsp success_rsp = 1;
    optional StartFailureRsp failure_rsp = 2;
}

message ResizeReq {
    required uint32 width = 1;
    required uint32 height = 2;
}

message ResizeSuccessRsp {
    required string shared_memory_name = 1;
    required string shared_memory_mutex_name = 2;
}

message ResizeFailureRsp {
    
}

message ResizeRsp {
    optional ResizeSuccessRsp success_rsp = 1;
    optional ResizeFailureRsp failure_rsp = 2;
}

message Rectangle {
    required uint32 top_left_posX = 1;
    required uint32 top_left_posY = 2;
    required uint32 bottom_right_posX = 3;
    required uint32 bottom_right_posY = 4;
}

message ViewUpdatedRsp {
    repeated Rectangle dirtyRectangles = 1;
    required uint32 version = 2;
}

message FocusEventReq {
    optional bool focus = 1;
}

message Win32KeyMessageReq {
    required int32 message = 1;
    required int32 w_param = 2;
    required int32 l_param = 3;
}

message AppleKeyEventReq {
    required int32 type = 1;
    required int32 modifierFlags = 2;
    required double timestamp = 3;
    required string characters = 4;
    required string charactersIgnoringModifiers = 5;
    required int32 isARepeat = 6;
    required uint32 keyCode = 7;
}

message MouseButtonPressedReq {
    required int32 button = 1;
}

message MouseButtonReleasedReq {
    required int32 button = 1;
}

message MouseDoubleClickReq {
    required int32 button = 1;
}

message MouseMovedReq {
    required int32 x = 1;
    required int32 y = 2;
    optional int32 modifiers = 3;
    optional bool is_virtual = 4;
}

message MouseWheelMovedReq {
    required int32 scroll_x = 1;
    required int32 scroll_y = 2;
}

message LangChangeReq {
    optional string langAbbreviate = 1;
}

message ShowUiReq {
    
}

message CloseUiReq {
    
}

message RefreshUiReq {
    
}

message BufferReadyReq {
    
}

message CreateProcessReq {
    required uint32 pid = 1;
    required uint32 starterId = 2;
}

message CreateProcessRsp {
    required uint32 pid = 1;
}

message VideoFrameReadyReq {
    required uint32 buffer_index = 1;
}

message VideoFrameReleasedRsp {
    required uint32 buffer_index = 1;
}

message CaptureScreenshotPush {
    required uint32 frame_width = 1;
    required uint32 frame_height = 2;
    required string buffer_name = 3;
    required uint32 buffer_size = 4;
}

message UiOpenedPush {
    required bool success = 1;
}

message UiClosedPush {
    required bool success = 1;
}

message IMEClearCompositionPush {
    
}

message IMESelectCandidatePush {
    required uint32 selected_candidate_index = 1;
}

message CursorChangePush {
    required uint32 cursor_id = 1;
}

message StreamingHostStartPush {
    required string session_id = 1;
    required string ubi_ticket = 2;
    required string app_id = 3;
    required string env = 4;
    required uint32 bitrate = 5;
    required uint32 resolution = 6;
    required uint32 fps = 7;
    required string game_name = 8;
    required uint32 guests_limit = 9;
    required string host_profile_id = 10;
}

message StreamingHostStartResponse {
    required bool result = 1;
    optional string host_peer_id = 2;
    optional StreamingStartConfig start_config = 3;
    optional string error_msg = 4;
    optional int32 error_code = 5;
}

message StreamingHostGuestPermissions {
    required bool gamepad = 1;
    required bool keyboard = 2;
    required bool mouse = 3;
    required bool immersive = 4;
}

message StreamingHostGuestSettingsResponse {
    required StreamingHostGuestPermissions permissions = 1;
}

message StreamingHostGuestConnectedReq {
    required uint32 guest_id = 1;
    required string profile_id = 2;
    required StreamingHostGuestSettingsResponse settings = 3;
    required uint64 connected_ts = 4;
}

message StreamingHostGuestDisconnectedReq {
    required uint32 guest_id = 1;
    required string profile_id = 2;
}

message StreamingHostStopPush {
    
}

message StreamingHostKickPush {
    required uint32 guest_id = 1;
}

message StreamingSettingsPush {
    required uint32 bitrate = 1;
    required uint32 resolution = 2;
    required uint32 fps = 3;
}

message StreamingHostPermissionsPush {
    required uint32 client_id = 1;
    required bool mouse_keyboard_allowed = 2;
    required bool gamepad_allowed = 3;
}

message StreamingStartConfig {
    optional uint32 width = 1;
    optional uint32 height = 2;
    optional uint32 bitrate = 3;
    optional bool is_audio_enabled = 4;
    optional bool is_focused = 5;
}

message StreamingHostStopReq {
    required bool result = 1;
}

message StreamingSettingsReq {
    required uint32 result = 1;
}

message StreamingLatencyReq {
    required uint32 latency = 1;
    required string profile_id = 2;
}

message StreamingHostMetricsReq {
    required uint32 latency = 1;
    required float bitrate = 2;
    required uint32 client_id = 3;
}

message StreamingVGPEventReq {
    required uint32 source = 1;
    required string profile_id = 2;
    required uint32 streaming_gamepad_id = 3;
}

message StreamingHostCreateTokenPush {
    required uint32 usage_limit = 1;
    required uint32 expiration = 2;
    required string profile_id = 3;
    required uint32 token_number = 4;
}

message StreamingHostCreateTokenReq {
    required bool result = 1;
    required string token = 2;
    required uint32 token_number = 3;
}

message StreamingHostDecodeTokenPush {
    required string token = 1;
    required uint32 token_number = 2;
}

message StreamingHostDecodeTokenReq {
    required bool result = 1;
    required string app_id = 2;
    required string space_id = 3;
    required uint32 product_id = 4;
    required uint32 token_number = 5;
    required string game_name = 6;
}

message StreamingHostFocusReq {
    required bool focus = 1;
}

message StreamingHostUpdateGuestRemainingTimePush {
    required uint32 client_id = 1;
    required uint32 remaining_time = 2;
}

message StreamingHostUpdateGuestRemainingTimeReq {
    required bool result = 1;
    required string host_peer_id = 2;
    required string error_msg = 3;
    required int32 error_code = 4;
}

message ScreenshotReadyReq {
    required bool isVulkanHDR = 1;
}

message ScreenshotCaptureFailureReq {
    
}

message VideoCaptureFailureReq {
    
}

message IMECommitText {
    optional string text = 1;
}

message IMECompositionUnderline {
    optional int32 from = 1;
    optional int32 to = 2;
    optional uint32 color = 3;
    optional uint32 background_color = 4;
    optional int32 thick = 5;
}

message IMESetCompositionReq {
    optional string text = 1;
    optional int32 composition_start = 2;
    repeated IMECompositionUnderline underlines = 3;
}

message IMECancelCompositionReq {
    
}

message IMEUpdateCandidatesReq {
    repeated string candidates = 1;
    optional uint32 selected_index = 2;
}

message Req {
    optional StartReq start_req = 1;
    optional ResizeReq resize_req = 2;
    optional Win32KeyMessageReq win_32_key_message_req = 3;
    optional AppleKeyEventReq apple_key_event_req = 4;
    optional MouseButtonPressedReq mouse_button_pressed_req = 5;
    optional MouseButtonReleasedReq mouse_button_released_req = 6;
    optional MouseMovedReq mouse_moved_req = 7;
    optional MouseWheelMovedReq mouse_wheel_moved_req = 8;
    optional CloseUiReq close_ui_req = 10;
    optional RefreshUiReq refresh_ui_req = 11;
    optional GetConfigurationReq get_configuration_req = 12;
    optional MouseDoubleClickReq mouse_double_click_req = 14;
    optional BufferReadyReq buffer_ready_req = 15;
    optional VideoFrameReadyReq video_frame_ready_req = 16;
    optional ScreenshotReadyReq screenshot_ready_req = 17;
    optional ScreenshotCaptureFailureReq screenshot_capture_failure_req = 18;
    optional VideoCaptureFailureReq video_capture_failure_req = 19;
    optional LangChangeReq lang_change_req = 20;
    optional UpdateFpsReq update_fps_req = 21;
    optional FocusEventReq focus_event_req = 22;
    optional IMECommitText ime_commit_text_req = 23;
    optional IMESetCompositionReq ime_set_composition_req = 24;
    optional IMECancelCompositionReq ime_cancel_composition_req = 25;
    optional IMEUpdateCandidatesReq ime_update_candidates_req = 26;
    optional StreamingSettingsReq streaming_settings_req = 27;
    optional StreamingHostStartResponse streaming_host_start_response = 29;
    optional StreamingHostGuestConnectedReq streaming_host_guest_connected_req = 30;
    optional StreamingHostGuestDisconnectedReq streaming_host_guest_disconnected_req = 31;
    optional StreamingHostStopReq streaming_host_stop_req = 32;
    repeated StreamingHostMetricsReq streaming_host_metrics_req = 33;
    optional StreamingVGPEventReq streaming_vgp_event_req = 34;
    optional StreamingHostCreateTokenReq streaming_host_create_token_req = 35;
    optional StreamingHostDecodeTokenReq streaming_host_decode_token_req = 36;
    optional StreamingHostFocusReq streaming_host_focus_req = 37;
    optional StreamingHostUpdateGuestRemainingTimeReq streaming_host_update_guest_remaining_time_req = 38;
}

message Rsp {
    optional StartRsp start_rsp = 1;
    optional ResizeRsp resize_rsp = 2;
    optional ViewUpdatedRsp view_updated_rsp = 3;
    optional GetConfigurationRsp get_configuration_rsp = 4;
    optional VideoFrameReleasedRsp video_frame_released_rsp = 6;
}

message MultipleLogin {
    
}

message UserBannedPush {
    
}

message Push {
    optional MultipleLogin multiple_login = 1;
    optional CaptureScreenshotPush capture_screenshot = 2;
    optional CursorChangePush cursor_change = 3;
    optional UserBannedPush user_banned = 4;
    optional UiOpenedPush ui_opened = 5;
    optional UiClosedPush ui_closed = 6;
    optional IMEClearCompositionPush ime_clear_composition = 7;
    optional IMESelectCandidatePush ime_select_candidate = 8;
    optional StreamingSettingsPush streaming_settings = 9;
    optional StreamingHostStartPush streaming_host_start = 10;
    optional StreamingHostStopPush streaming_host_stop = 11;
    optional StreamingHostKickPush streaming_host_kick = 12;
    optional StreamingHostPermissionsPush streaming_host_permissions = 13;
    optional StreamingHostCreateTokenPush streaming_host_create_token = 14;
    optional StreamingHostDecodeTokenPush streaming_host_decode_token = 15;
    optional StreamingHostUpdateGuestRemainingTimePush streaming_host_update_guest_remaining_time = 16;
}

message Upstream {
    optional Req req = 1;
}

message Downstream {
    optional Push push = 1;
    optional Rsp rsp = 2;
}

message UpdateFpsReq {
    required uint32 fps = 1;
}
